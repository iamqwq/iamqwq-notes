# Workflow of Java Program - Java 程序的运行流程

## 1 概述

![202304091917java-workflow-3x.excalidraw](Java%20Overview%20-%20%E6%B5%85%E8%B0%88%20Java.assets/202304091917java-workflow-3x.excalidraw.png)

Java 程序从源码到执行的过程相比 C 从源码直接编译为本地平台的机器码运行的方式要稍有不同，Java 的程序从源码开始到实际运行大致要经历以下几个步骤：

1. 编译源代码：Java 源代码需要编译成 Java 字节码（ Bytecode ），Java 编译器（ javac ）会把源代码编译成 Java 字节码文件，这些字节码文件通常以 .class 文件的形式保存。
2. 类加载：当 Java 程序运行时，Java 虚拟机（ JVM ）会自动把字节码文件加载到内存中，这个过程被称为类加载。类加载器负责将字节码文件加载到 JVM 中，并将其转换成可以被 JVM 执行的形式。
3. 字节码解释执行：一旦字节码被加载到内存中，JVM 会对字节码进行解释执行，将其转换成机器码（ Native Code ），然后执行。
5. 运行程序：最后 Java 程序被执行。在程序执行期间，JVM 还会进行垃圾回收、异常处理等操作，以保证程序的正常运行。

Java 程序编译后生成的字节码并不能直接运行，而仍然需要 JVM 来解释运行。这种复杂的操作流程是为了良好的跨平台性。

对于不同的处理器架构来说，指令集是不同的；对于不同的操作系统，其提供的 API 接口和系统调用也不是相同的。举例来说，在 Windows 上编译出的可执行的机器码，在 Linux 中则完全无法执行。

JVM 在不同的环境中对字节码的解释是不相同的，比如在 Windows 中进行 A 的操作最终将会被转换为 abba 的指令序列，而在 Linux 中进行 A 的操作则会被转换为 abcd 的指令序列。因此编写程序的人只需要关注代码，而执行程序的人保证计算机中有对应环境的 JVM 即可，JVM 会对字节码进行正确的解释。

## 2 详解类加载